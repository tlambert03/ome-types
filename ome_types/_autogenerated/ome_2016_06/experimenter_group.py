from typing import Optional

from pydantic import Field

from ome_types._autogenerated.ome_2016_06.annotation_ref import AnnotationRef
from ome_types._autogenerated.ome_2016_06.experimenter_ref import (
    ExperimenterRef,
)
from ome_types._autogenerated.ome_2016_06.leader import Leader
from ome_types._mixins._base_type import OMEType

__NAMESPACE__ = "http://www.openmicroscopy.org/Schemas/OME/2016-06"


class ExperimenterGroup(OMEType):
    """The ExperimenterGroupID is required.

    Information should ideally be specified for at least one Leader as a
    contact for the group. The Leaders are themselves Experimenters.

    Attributes
    ----------
    description : None | str
        A description for the group. [plain-text multi-line string]
    experimenter_refs : list[ExperimenterRef]
        (The ExperimenterGroup ExperimenterRefs).
    leaders : list[Leader]
        (The ExperimenterGroup Leaders).
    annotation_refs : list[AnnotationRef]
        (The ExperimenterGroup AnnotationRefs).
    name : None | str
        (The ExperimenterGroup Name).
    id : str
        (The ExperimenterGroup ID).
    """

    class Meta:
        namespace = "http://www.openmicroscopy.org/Schemas/OME/2016-06"

    description: Optional[str] = Field(
        default=None,
        json_schema_extra={
            "name": "Description",
            "type": "Element",
            "white_space": "preserve",
        },
    )
    experimenter_refs: list[ExperimenterRef] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "ExperimenterRef",
            "type": "Element",
        },
    )
    leaders: list[Leader] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "Leader",
            "type": "Element",
        },
    )
    annotation_refs: list[AnnotationRef] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "AnnotationRef",
            "type": "Element",
        },
    )
    name: Optional[str] = Field(
        default=None,
        json_schema_extra={
            "name": "Name",
            "type": "Attribute",
        },
    )
    id: str = Field(
        default="__auto_sequence__",
        pattern=r"(urn:lsid:([\w\-\.]+\.[\w\-\.]+)+:ExperimenterGroup:\S+)|(ExperimenterGroup:\S+)",
        json_schema_extra={
            "name": "ID",
            "type": "Attribute",
            "required": True,
            "pattern": r"(urn:lsid:([\w\-\.]+\.[\w\-\.]+)+:ExperimenterGroup:\S+)|(ExperimenterGroup:\S+)",
        },
    )
