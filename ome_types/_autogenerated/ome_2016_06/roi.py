from typing import Optional

from pydantic import Field, field_validator

from ome_types._autogenerated.ome_2016_06.annotation_ref import AnnotationRef
from ome_types._autogenerated.ome_2016_06.ellipse import Ellipse
from ome_types._autogenerated.ome_2016_06.label import Label
from ome_types._autogenerated.ome_2016_06.line import Line
from ome_types._autogenerated.ome_2016_06.mask import Mask
from ome_types._autogenerated.ome_2016_06.point import Point
from ome_types._autogenerated.ome_2016_06.polygon import Polygon
from ome_types._autogenerated.ome_2016_06.polyline import Polyline
from ome_types._autogenerated.ome_2016_06.rectangle import Rectangle
from ome_types._mixins._base_type import OMEType
from ome_types._mixins._collections import ShapeUnionMixin
from ome_types._mixins._validators import validate_shape_union

__NAMESPACE__ = "http://www.openmicroscopy.org/Schemas/OME/2016-06"


class ROI(OMEType):
    """A four dimensional 'Region of Interest'.

    If they are not used, and the Image has more than one plane, the
    entire set of planes is assumed to be included in the ROI. Multiple
    ROIs may be specified.

    Attributes
    ----------
    union : "ROI.Union"
        (The ROI Union).
    annotation_refs : list[AnnotationRef]
        (The ROI AnnotationRefs).
    description : None | str
        A description for the ROI. [plain-text multi-line string]
    id : str
        (The ROI ID).
    name : None | str
        The Name identifies the ROI to the user. [plain-text string]
    """

    class Meta:
        namespace = "http://www.openmicroscopy.org/Schemas/OME/2016-06"

    union: "ROI.Union" = Field(
        default_factory=lambda: ROI.Union(),
        json_schema_extra={
            "name": "Union",
            "type": "Element",
            "required": True,
        },
    )
    annotation_refs: list[AnnotationRef] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "AnnotationRef",
            "type": "Element",
        },
    )
    description: Optional[str] = Field(
        default=None,
        json_schema_extra={
            "name": "Description",
            "type": "Element",
            "white_space": "preserve",
        },
    )
    id: str = Field(
        default="__auto_sequence__",
        pattern=r"(urn:lsid:([\w\-\.]+\.[\w\-\.]+)+:\S+)|(\S+)",
        json_schema_extra={
            "name": "ID",
            "type": "Attribute",
            "required": True,
            "pattern": r"(urn:lsid:([\w\-\.]+\.[\w\-\.]+)+:\S+)|(\S+)",
        },
    )
    name: Optional[str] = Field(
        default=None,
        json_schema_extra={
            "name": "Name",
            "type": "Attribute",
        },
    )

    class Union(ShapeUnionMixin, OMEType):
        labels: list[Label] = Field(
            default_factory=list,
            json_schema_extra={
                "name": "Label",
                "type": "Element",
            },
        )
        polygons: list[Polygon] = Field(
            default_factory=list,
            json_schema_extra={
                "name": "Polygon",
                "type": "Element",
            },
        )
        polylines: list[Polyline] = Field(
            default_factory=list,
            json_schema_extra={
                "name": "Polyline",
                "type": "Element",
            },
        )
        lines: list[Line] = Field(
            default_factory=list,
            json_schema_extra={
                "name": "Line",
                "type": "Element",
            },
        )
        ellipses: list[Ellipse] = Field(
            default_factory=list,
            json_schema_extra={
                "name": "Ellipse",
                "type": "Element",
            },
        )
        points: list[Point] = Field(
            default_factory=list,
            json_schema_extra={
                "name": "Point",
                "type": "Element",
            },
        )
        masks: list[Mask] = Field(
            default_factory=list,
            json_schema_extra={
                "name": "Mask",
                "type": "Element",
            },
        )
        rectangles: list[Rectangle] = Field(
            default_factory=list,
            json_schema_extra={
                "name": "Rectangle",
                "type": "Element",
            },
        )

    _v_shape_union = field_validator("union", mode="before")(validate_shape_union)


Union = ROI.Union
