from typing import Optional

from pydantic import Field

from ome_types._autogenerated.ome_2016_06.binning import Binning
from ome_types._autogenerated.ome_2016_06.settings import Settings
from ome_types._autogenerated.ome_2016_06.units_electric_potential import (
    UnitsElectricPotential,
)
from ome_types._autogenerated.ome_2016_06.units_frequency import UnitsFrequency

__NAMESPACE__ = "http://www.openmicroscopy.org/Schemas/OME/2016-06"


class DetectorSettings(Settings):
    """This holds the setting applied to a detector as well as a reference to the
    detector.

    The ID is the detector used in this case. The values stored in
    DetectorSettings represent the variable values, fixed values not
    modified during the acquisition go in Detector. Each attribute now
    has an indication of what type of detector it applies to. This is
    preparatory work for cleaning up and possibly splitting this object
    into sub-types.

    Attributes
    ----------
    id : str
        (The DetectorSettings ID).
    offset : None | float
        The Offset of the detector. [units none] {used:CCD,EMCCD}
    gain : None | float
        The Gain of the detector. [units:none] {used:CCD,EMCCD,PMT}
    voltage : None | float
        The Voltage of the detector. {used:PMT} Units are set by VoltageUnit.
    voltage_unit : UnitsElectricPotential
        The units of the Voltage of the detector - default:volts[V]
    zoom : None | float
        The Zoom or "Confocal Zoom" or "Scan Zoom" for a detector. [units:none]
        {used:PMT}
    read_out_rate : None | float
        The speed at which the detector can count pixels.  {used:CCD,EMCCD} This is
        the bytes per second that can be read from the detector (like a baud rate).
        Units are set by ReadOutRateUnit.
    read_out_rate_unit : UnitsFrequency
        The units of the ReadOutRate - default:megahertz[Hz].
    binning : None | Binning
        Represents the number of pixels that are combined to form larger pixels.
        {used:CCD,EMCCD}
    integration : None | int
        This is the number of sequential frames that get averaged, to improve the
        signal-to-noise ratio. [units:none] {used:CCD,EMCCD}
    """

    class Meta:
        namespace = "http://www.openmicroscopy.org/Schemas/OME/2016-06"

    id: str = Field(
        default="__auto_sequence__",
        pattern=r"(urn:lsid:([\w\-\.]+\.[\w\-\.]+)+:Detector:\S+)|(Detector:\S+)",
        json_schema_extra={
            "name": "ID",
            "type": "Attribute",
            "required": True,
            "pattern": r"(urn:lsid:([\w\-\.]+\.[\w\-\.]+)+:Detector:\S+)|(Detector:\S+)",
        },
    )
    offset: Optional[float] = Field(
        default=None,
        json_schema_extra={
            "name": "Offset",
            "type": "Attribute",
        },
    )
    gain: Optional[float] = Field(
        default=None,
        json_schema_extra={
            "name": "Gain",
            "type": "Attribute",
        },
    )
    voltage: Optional[float] = Field(
        default=None,
        json_schema_extra={
            "name": "Voltage",
            "type": "Attribute",
        },
    )
    voltage_unit: UnitsElectricPotential = Field(
        default=UnitsElectricPotential.VOLT,
        json_schema_extra={
            "name": "VoltageUnit",
            "type": "Attribute",
        },
    )
    zoom: Optional[float] = Field(
        default=None,
        json_schema_extra={
            "name": "Zoom",
            "type": "Attribute",
        },
    )
    read_out_rate: Optional[float] = Field(
        default=None,
        json_schema_extra={
            "name": "ReadOutRate",
            "type": "Attribute",
        },
    )
    read_out_rate_unit: UnitsFrequency = Field(
        default=UnitsFrequency.MEGAHERTZ,
        json_schema_extra={
            "name": "ReadOutRateUnit",
            "type": "Attribute",
        },
    )
    binning: Optional[Binning] = Field(
        default=None,
        json_schema_extra={
            "name": "Binning",
            "type": "Attribute",
        },
    )
    integration: Optional[int] = Field(
        default=None,
        ge=1,
        json_schema_extra={
            "name": "Integration",
            "type": "Attribute",
            "min_inclusive": 1,
        },
    )
