from typing import Optional

from pydantic import Field

from ome_types._autogenerated.ome_2016_06.experimenter_ref import (
    ExperimenterRef,
)
from ome_types._autogenerated.ome_2016_06.light_source_settings import (
    LightSourceSettings,
)
from ome_types._autogenerated.ome_2016_06.microbeam_manipulation_value import (
    MicrobeamManipulation_value,
)
from ome_types._autogenerated.ome_2016_06.roi_ref import ROIRef
from ome_types._mixins._base_type import OMEType

__NAMESPACE__ = "http://www.openmicroscopy.org/Schemas/OME/2016-06"


class MicrobeamManipulation(OMEType):
    """Defines a microbeam operation type and the region of the image it was
    applied to.

    The LightSourceRef element is a reference to a LightSource specified
    in the Instrument element which was used for a technique other than
    illumination for the purpose of imaging. For example, a laser used
    for photobleaching.

    Attributes
    ----------
    description : None | str
        A description for the Microbeam Manipulation. [plain-text multi-line
        string]
    roi_refs : list[ROIRef]
        (The MicrobeamManipulation ROIRefs).
    experimenter_ref : ExperimenterRef
        (The MicrobeamManipulation ExperimenterRef).
    light_source_settings_combinations : list[LightSourceSettings]
        (The MicrobeamManipulation LightSourceSettingsCombinations).
    id : str
        (The MicrobeamManipulation ID).
    type : list[MicrobeamManipulation_value]
        The type of manipulation performed.
    """

    class Meta:
        namespace = "http://www.openmicroscopy.org/Schemas/OME/2016-06"

    description: Optional[str] = Field(
        default=None,
        json_schema_extra={
            "name": "Description",
            "type": "Element",
            "white_space": "preserve",
        },
    )
    roi_refs: list[ROIRef] = Field(
        default_factory=list,
        min_length=1,
        json_schema_extra={
            "name": "ROIRef",
            "type": "Element",
            "min_occurs": 1,
        },
    )
    experimenter_ref: ExperimenterRef = Field(
        json_schema_extra={
            "name": "ExperimenterRef",
            "type": "Element",
            "required": True,
        }
    )
    light_source_settings_combinations: list[LightSourceSettings] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "LightSourceSettings",
            "type": "Element",
        },
    )
    id: str = Field(
        default="__auto_sequence__",
        pattern=r"(urn:lsid:([\w\-\.]+\.[\w\-\.]+)+:MicrobeamManipulation:\S+)|(MicrobeamManipulation:\S+)",
        json_schema_extra={
            "name": "ID",
            "type": "Attribute",
            "required": True,
            "pattern": r"(urn:lsid:([\w\-\.]+\.[\w\-\.]+)+:MicrobeamManipulation:\S+)|(MicrobeamManipulation:\S+)",
        },
    )
    type: list[MicrobeamManipulation_value] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "Type",
            "type": "Attribute",
            "tokens": True,
        },
    )


value = MicrobeamManipulation_value
