from typing import Optional

from pydantic import Field

from ome_types._autogenerated.ome_2016_06.annotation_ref import AnnotationRef
from ome_types._autogenerated.ome_2016_06.dataset_ref import DatasetRef
from ome_types._autogenerated.ome_2016_06.experimenter_group_ref import (
    ExperimenterGroupRef,
)
from ome_types._autogenerated.ome_2016_06.experimenter_ref import (
    ExperimenterRef,
)
from ome_types._mixins._base_type import OMEType

__NAMESPACE__ = "http://www.openmicroscopy.org/Schemas/OME/2016-06"


class Project(OMEType):
    """The Project ID is required. Datasets can be grouped into projects using a
    many-to-many relationship.

    A Dataset may belong to one or more Projects by including one or more ProjectRef elements which refer to Project IDs.
    Projects do not directly contain images - only by virtue of containing datasets, which themselves contain images.

    Attributes
    ----------
    description : None | str
        A description for the project. [plain-text multi-line string]
    experimenter_ref : None | ExperimenterRef
        (The Project ExperimenterRef).
    experimenter_group_ref : None | ExperimenterGroupRef
        (The Project ExperimenterGroupRef).
    dataset_refs : list[DatasetRef]
        (The Project DatasetRefs).
    annotation_refs : list[AnnotationRef]
        (The Project AnnotationRefs).
    name : None | str
        (The Project Name).
    id : str
        (The Project ID).
    """

    class Meta:
        namespace = "http://www.openmicroscopy.org/Schemas/OME/2016-06"

    description: Optional[str] = Field(
        default=None,
        json_schema_extra={
            "name": "Description",
            "type": "Element",
            "white_space": "preserve",
        },
    )
    experimenter_ref: Optional[ExperimenterRef] = Field(
        default=None,
        json_schema_extra={
            "name": "ExperimenterRef",
            "type": "Element",
        },
    )
    experimenter_group_ref: Optional[ExperimenterGroupRef] = Field(
        default=None,
        json_schema_extra={
            "name": "ExperimenterGroupRef",
            "type": "Element",
        },
    )
    dataset_refs: list[DatasetRef] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "DatasetRef",
            "type": "Element",
        },
    )
    annotation_refs: list[AnnotationRef] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "AnnotationRef",
            "type": "Element",
        },
    )
    name: Optional[str] = Field(
        default=None,
        json_schema_extra={
            "name": "Name",
            "type": "Attribute",
        },
    )
    id: str = Field(
        default="__auto_sequence__",
        pattern=r"(urn:lsid:([\w\-\.]+\.[\w\-\.]+)+:Project:\S+)|(Project:\S+)",
        json_schema_extra={
            "name": "ID",
            "type": "Attribute",
            "required": True,
            "pattern": r"(urn:lsid:([\w\-\.]+\.[\w\-\.]+)+:Project:\S+)|(Project:\S+)",
        },
    )
