from typing import Optional

from pydantic import Field

from ome_types._autogenerated.ome_2016_06.annotation_ref import AnnotationRef
from ome_types._autogenerated.ome_2016_06.dichroic_ref import DichroicRef
from ome_types._autogenerated.ome_2016_06.filter_ref import FilterRef
from ome_types._mixins._base_type import OMEType

__NAMESPACE__ = "http://www.openmicroscopy.org/Schemas/OME/2016-06"


class LightPath(OMEType):
    """
    A description of the light path.

    Attributes
    ----------
    excitation_filters : list[FilterRef]
        The Filters placed in the Excitation light path.
    dichroic_ref : None | DichroicRef
        (The LightPath DichroicRef).
    emission_filters : list[FilterRef]
        The Filters placed in the Emission light path.
    annotation_refs : list[AnnotationRef]
        (The LightPath AnnotationRefs).
    """

    class Meta:
        namespace = "http://www.openmicroscopy.org/Schemas/OME/2016-06"

    excitation_filters: list[FilterRef] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "ExcitationFilterRef",
            "type": "Element",
        },
    )
    dichroic_ref: Optional[DichroicRef] = Field(
        default=None,
        json_schema_extra={
            "name": "DichroicRef",
            "type": "Element",
        },
    )
    emission_filters: list[FilterRef] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "EmissionFilterRef",
            "type": "Element",
        },
    )
    annotation_refs: list[AnnotationRef] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "AnnotationRef",
            "type": "Element",
        },
    )
