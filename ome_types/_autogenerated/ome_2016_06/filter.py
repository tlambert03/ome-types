from typing import Optional

from pydantic import Field

from ome_types._autogenerated.ome_2016_06.annotation_ref import AnnotationRef
from ome_types._autogenerated.ome_2016_06.filter_type import Filter_Type
from ome_types._autogenerated.ome_2016_06.manufacturer_spec import (
    ManufacturerSpec,
)
from ome_types._autogenerated.ome_2016_06.transmittance_range import (
    TransmittanceRange,
)

__NAMESPACE__ = "http://www.openmicroscopy.org/Schemas/OME/2016-06"


class Filter(ManufacturerSpec):
    """A filter is either an excitation or emission filters. There should be one
    filter element specified per wavelength in the image. The channel number
    associated with a filter set is specified in Channel. It is based on the
    FilterSpec type, so has the required attributes Manufacturer, Model, and
    LotNumber. It may also contain a Type attribute which may be set to 'LongPass',
    'ShortPass', 'BandPass', 'MultiPass',.

    'Dichroic', 'NeutralDensity', 'Tuneable' or 'Other'.
    It can be associated with an optional FilterWheel - Note: this is not the same as a FilterSet

    Attributes
    ----------
    transmittance_range : None | TransmittanceRange
        (The Filter TransmittanceRange).
    annotation_refs : list[AnnotationRef]
        (The Filter AnnotationRefs).
    type : None | Filter_Type
        (The Filter Type).
    filter_wheel : None | str
        A filter 'wheel' in OME can refer to any arrangement of filters in a filter
        holder of any shape. It could, for example, be a filter slider. [plain text
        string]
    id : str
        (The Filter ID).
    """

    class Meta:
        namespace = "http://www.openmicroscopy.org/Schemas/OME/2016-06"

    transmittance_range: Optional[TransmittanceRange] = Field(
        default=None,
        json_schema_extra={
            "name": "TransmittanceRange",
            "type": "Element",
        },
    )
    annotation_refs: list[AnnotationRef] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "AnnotationRef",
            "type": "Element",
        },
    )
    type: Optional[Filter_Type] = Field(
        default=None,
        json_schema_extra={
            "name": "Type",
            "type": "Attribute",
        },
    )
    filter_wheel: Optional[str] = Field(
        default=None,
        json_schema_extra={
            "name": "FilterWheel",
            "type": "Attribute",
        },
    )
    id: str = Field(
        default="__auto_sequence__",
        pattern=r"(urn:lsid:([\w\-\.]+\.[\w\-\.]+)+:Filter:\S+)|(Filter:\S+)",
        json_schema_extra={
            "name": "ID",
            "type": "Attribute",
            "required": True,
            "pattern": r"(urn:lsid:([\w\-\.]+\.[\w\-\.]+)+:Filter:\S+)|(Filter:\S+)",
        },
    )


Type = Filter_Type
