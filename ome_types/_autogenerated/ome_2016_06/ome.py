from typing import Optional

from pydantic import Field, field_validator

from ome_types._autogenerated.ome_2016_06.dataset import Dataset
from ome_types._autogenerated.ome_2016_06.experiment import Experiment
from ome_types._autogenerated.ome_2016_06.experimenter import Experimenter
from ome_types._autogenerated.ome_2016_06.experimenter_group import (
    ExperimenterGroup,
)
from ome_types._autogenerated.ome_2016_06.folder import Folder
from ome_types._autogenerated.ome_2016_06.image import Image
from ome_types._autogenerated.ome_2016_06.instrument import Instrument
from ome_types._autogenerated.ome_2016_06.plate import Plate
from ome_types._autogenerated.ome_2016_06.project import Project
from ome_types._autogenerated.ome_2016_06.rights import Rights
from ome_types._autogenerated.ome_2016_06.roi import ROI
from ome_types._autogenerated.ome_2016_06.screen import Screen
from ome_types._autogenerated.ome_2016_06.structured_annotations import (
    StructuredAnnotations,
)
from ome_types._mixins._base_type import OMEType
from ome_types._mixins._ome import OMEMixin
from ome_types._mixins._validators import validate_structured_annotations

__NAMESPACE__ = "http://www.openmicroscopy.org/Schemas/OME/2016-06"


class OME(OMEMixin, OMEType):
    """The OME element is a container for all information objects accessible by
    OME.

    These information objects include descriptions of the imaging experiments
    and the people who perform them, descriptions of the microscope, the resulting
    images and how they were acquired, the analyses performed on those images,
    and the analysis results themselves.
    An OME file may contain any or all of this information.
    With the creation of the Metadata Only Companion OME-XML and Binary Only OME-TIFF files
    the top level OME node has changed slightly.
    It can EITHER:
    Contain all the previously expected elements
    OR:
    Contain a single BinaryOnly element that points at
    its Metadata Only Companion OME-XML file.

    Attributes
    ----------
    rights : None | Rights
        (The OME Rights).
    projects : list[Project]
        (The OME Projects).
    datasets : list[Dataset]
        (The OME Datasets).
    folders : list[Folder]
        (The OME Folders).
    experiments : list[Experiment]
        (The OME Experiments).
    plates : list[Plate]
        (The OME Plates).
    screens : list[Screen]
        (The OME Screens).
    experimenters : list[Experimenter]
        (The OME Experimenters).
    experimenter_groups : list[ExperimenterGroup]
        (The OME ExperimenterGroups).
    instruments : list[Instrument]
        (The OME Instruments).
    images : list[Image]
        (The OME Images).
    structured_annotations : None | StructuredAnnotations
        (The OME StructuredAnnotations).
    rois : list[ROI]
        (The OME ROIs).
    binary_only : None | "OME.BinaryOnly"
        Pointer to an external metadata file. If this element is present, then no
        other metadata may be present in this file, i.e. this file is a place-
        holder.
    uuid : None | str
        This unique identifier is used to keep track of multi part files. It allows
        the links between files to survive renaming. While OPTIONAL in the general
        case this is REQUIRED in a MetadataOnly Companion to a collection of
        BinaryOnly files.
    creator : None | str
        This is the name of the creating application of the OME-XML and preferably
        its full version. e.g "CompanyName, SoftwareName, V2.6.3456" This is
        optional but we hope it will be set by applications writing out OME-XML
        from scratch.
    """

    class Meta:
        namespace = "http://www.openmicroscopy.org/Schemas/OME/2016-06"

    rights: Optional[Rights] = Field(
        default=None,
        json_schema_extra={
            "name": "Rights",
            "type": "Element",
        },
    )
    projects: list[Project] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "Project",
            "type": "Element",
        },
    )
    datasets: list[Dataset] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "Dataset",
            "type": "Element",
        },
    )
    folders: list[Folder] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "Folder",
            "type": "Element",
        },
    )
    experiments: list[Experiment] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "Experiment",
            "type": "Element",
        },
    )
    plates: list[Plate] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "Plate",
            "type": "Element",
        },
    )
    screens: list[Screen] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "Screen",
            "type": "Element",
        },
    )
    experimenters: list[Experimenter] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "Experimenter",
            "type": "Element",
        },
    )
    experimenter_groups: list[ExperimenterGroup] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "ExperimenterGroup",
            "type": "Element",
        },
    )
    instruments: list[Instrument] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "Instrument",
            "type": "Element",
        },
    )
    images: list[Image] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "Image",
            "type": "Element",
        },
    )
    structured_annotations: Optional[StructuredAnnotations] = Field(
        default_factory=StructuredAnnotations,
        json_schema_extra={
            "name": "StructuredAnnotations",
            "type": "Element",
        },
    )
    rois: list[ROI] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "ROI",
            "type": "Element",
        },
    )
    binary_only: Optional["OME.BinaryOnly"] = Field(
        default=None,
        json_schema_extra={
            "name": "BinaryOnly",
            "type": "Element",
        },
    )
    uuid: Optional[str] = Field(
        default=None,
        pattern=r"(urn:uuid:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})",
        json_schema_extra={
            "name": "UUID",
            "type": "Attribute",
            "pattern": r"(urn:uuid:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})",
        },
    )
    creator: Optional[str] = Field(
        default=None,
        json_schema_extra={
            "name": "Creator",
            "type": "Attribute",
        },
    )

    class BinaryOnly(OMEType):
        """
        Attributes
        ----------
        metadata_file : str
            Filename of the OME-XML metadata file for this binary data. If the file
            cannot be found, a search can be performed based on the UUID.
        uuid : str
            The unique identifier of another OME-XML block whose metadata describes the
            binary data in this file. This UUID is considered authoritative regardless
            of mismatches in the filename.
        """

        metadata_file: str = Field(
            json_schema_extra={
                "name": "MetadataFile",
                "type": "Attribute",
                "required": True,
            }
        )
        uuid: str = Field(
            pattern=r"(urn:uuid:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})",
            json_schema_extra={
                "name": "UUID",
                "type": "Attribute",
                "required": True,
                "pattern": r"(urn:uuid:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})",
            },
        )

    _v_structured_annotations = field_validator(
        "structured_annotations", mode="before"
    )(validate_structured_annotations)


BinaryOnly = OME.BinaryOnly
