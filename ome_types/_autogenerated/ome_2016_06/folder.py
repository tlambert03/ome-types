from typing import Optional

from pydantic import Field

from ome_types._autogenerated.ome_2016_06.annotation_ref import AnnotationRef
from ome_types._autogenerated.ome_2016_06.folder_ref import FolderRef
from ome_types._autogenerated.ome_2016_06.image_ref import ImageRef
from ome_types._autogenerated.ome_2016_06.roi_ref import ROIRef
from ome_types._mixins._base_type import OMEType

__NAMESPACE__ = "http://www.openmicroscopy.org/Schemas/OME/2016-06"


class Folder(OMEType):
    """An element specifying a possibly heterogeneous collection of data.

    Folders may contain Folders so that data may be organized within a
    tree of Folders. Data may be in multiple Folders but a Folder may
    not be in more than one other Folder.

    Attributes
    ----------
    description : None | str
        A description for the folder. [plain-text multi-line string]
    folder_refs : list[FolderRef]
        (The Folder FolderRefs).
    image_refs : list[ImageRef]
        (The Folder ImageRefs).
    roi_refs : list[ROIRef]
        (The Folder ROIRefs).
    annotation_refs : list[AnnotationRef]
        (The Folder AnnotationRefs).
    id : str
        (The Folder ID).
    name : None | str
        A name for the folder that is suitable for presentation to the user.
    """

    class Meta:
        namespace = "http://www.openmicroscopy.org/Schemas/OME/2016-06"

    description: Optional[str] = Field(
        default=None,
        json_schema_extra={
            "name": "Description",
            "type": "Element",
            "white_space": "preserve",
        },
    )
    folder_refs: list[FolderRef] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "FolderRef",
            "type": "Element",
        },
    )
    image_refs: list[ImageRef] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "ImageRef",
            "type": "Element",
        },
    )
    roi_refs: list[ROIRef] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "ROIRef",
            "type": "Element",
        },
    )
    annotation_refs: list[AnnotationRef] = Field(
        default_factory=list,
        json_schema_extra={
            "name": "AnnotationRef",
            "type": "Element",
        },
    )
    id: str = Field(
        default="__auto_sequence__",
        pattern=r"(urn:lsid:([\w\-\.]+\.[\w\-\.]+)+:Folder:\S+)|(Folder:\S+)",
        json_schema_extra={
            "name": "ID",
            "type": "Attribute",
            "required": True,
            "pattern": r"(urn:lsid:([\w\-\.]+\.[\w\-\.]+)+:Folder:\S+)|(Folder:\S+)",
        },
    )
    name: Optional[str] = Field(
        default=None,
        json_schema_extra={
            "name": "Name",
            "type": "Attribute",
        },
    )
