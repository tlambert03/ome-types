"""These validators are added to the generated classes in ome_types._autogenerated.

that logic is at the bottom of ome_autogen._generator
"""
import warnings
from typing import TYPE_CHECKING, Any, Dict

if TYPE_CHECKING:
    from ome_types.model import BinData, Pixels, XMLAnnotation
    from xsdata_pydantic_basemodel.compat import AnyElement


# @root_validator(pre=True)
def bin_data_root_validator(cls: "BinData", values: dict) -> Dict[str, Any]:
    # This catches the case of <BinData Length="0"/>, where the parser may have
    # omitted value from the dict, and sets value to b""
    # seems like it could be done in a default_factory, but that would
    # require more modification of xsdata I think
    if "value" not in values:
        if values.get("length") != 0:  # pragma: no cover
            warnings.warn(
                "BinData length is non-zero but value is missing", stacklevel=2
            )
        values["value"] = b""
    return values


# @validator("any_elements", each_item=True)
def any_elements_validator(cls: "XMLAnnotation.Value", v: Any) -> object:
    # This validator is used because XMLAnnotation.Value.any_elements is
    # annotated as List[object]. So pydantic won't coerce dicts to AnyElement
    # automatically (which is important when constructing OME objects from dicts)
    if isinstance(v, dict):
        return _cast_to_any_element(v)
    return v


def _cast_to_any_element(v: dict) -> "AnyElement":
    # this needs to be delayed until runtime because of circular imports
    from xsdata_pydantic_basemodel.compat import AnyElement

    if "children" in v:
        v["children"] = [_cast_to_any_element(c) for c in v["children"]]
    return AnyElement(**v)


# @root_validator(pre=True)
def pixels_root_validator(cls: "Pixels", values: dict) -> dict:
    if "metadata_only" in values:
        if isinstance(values["metadata_only"], bool):
            if not values["metadata_only"]:
                values.pop("metadata_only")
            else:
                # type ignore in case the autogeneration hasn't been built
                from ome_types.model import MetadataOnly  # type: ignore

                values["metadata_only"] = MetadataOnly()

    return values
