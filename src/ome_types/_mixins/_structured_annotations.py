import itertools
from typing import TYPE_CHECKING, Iterator, Union, cast, get_args

# for circular import reasons...
from ome_types._autogenerated.ome_2016_06.boolean_annotation import BooleanAnnotation
from ome_types._autogenerated.ome_2016_06.comment_annotation import CommentAnnotation
from ome_types._autogenerated.ome_2016_06.double_annotation import DoubleAnnotation
from ome_types._autogenerated.ome_2016_06.file_annotation import FileAnnotation
from ome_types._autogenerated.ome_2016_06.list_annotation import ListAnnotation
from ome_types._autogenerated.ome_2016_06.long_annotation import LongAnnotation
from ome_types._autogenerated.ome_2016_06.map_annotation import MapAnnotation
from ome_types._autogenerated.ome_2016_06.tag_annotation import TagAnnotation
from ome_types._autogenerated.ome_2016_06.term_annotation import TermAnnotation
from ome_types._autogenerated.ome_2016_06.timestamp_annotation import (
    TimestampAnnotation,
)
from ome_types._autogenerated.ome_2016_06.xml_annotation import XMLAnnotation

AnnotationType = Union[
    XMLAnnotation,
    FileAnnotation,
    ListAnnotation,
    LongAnnotation,
    DoubleAnnotation,
    CommentAnnotation,
    BooleanAnnotation,
    TimestampAnnotation,
    TagAnnotation,
    TermAnnotation,
    MapAnnotation,
]
AnnotationInstances = get_args(AnnotationType)

if TYPE_CHECKING:
    from ome_types.model import StructuredAnnotations


class StructuredAnnotationsMixin:
    def __iter__(self) -> Iterator[AnnotationType]:  # type: ignore[override]
        self = cast("StructuredAnnotations", self)
        return itertools.chain(
            self.xml_annotations,
            self.file_annotations,
            self.list_annotations,
            self.long_annotations,
            self.double_annotations,
            self.comment_annotations,
            self.boolean_annotations,
            self.timestamp_annotations,
            self.tag_annotations,
            self.term_annotations,
            self.map_annotations,
        )

    def __getitem__(self, i: int) -> AnnotationType:
        # return the ith item in the __iter__ sequence
        return next(itertools.islice(self, i, None))

    def __len__(self) -> int:
        return sum(1 for _ in self)

    def append(self, item: AnnotationType) -> None:
        getattr(self, self._field_name(item)).append(item)

    def remove(self, item: AnnotationType) -> None:
        getattr(self, self._field_name(item)).remove(item)

    def __eq__(self, _value: object) -> bool:
        if isinstance(_value, list):
            return list(self) == _value
        return super().__eq__(_value)

    @classmethod
    def _field_name(cls, item: AnnotationType) -> str:
        if not isinstance(item, AnnotationInstances):
            raise TypeError(  # pragma: no cover
                f"Expected an instance of {AnnotationInstances}, got {item!r}"
            )
        return item.__class__.__name__[:-10].lower() + "_annotations"
