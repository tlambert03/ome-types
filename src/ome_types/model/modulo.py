from enum import Enum
from typing import List, Optional, Union

from pydantic_compat import model_validator

from ome_types._autogenerated.ome_2016_06 import XMLAnnotation
from ome_types._mixins._base_type import OMEType
from xsdata_pydantic_basemodel.pydantic_compat import Field

MODULO_NS = "openmicroscopy.org/omero/dimension/modulo"
ADDITIONS_NS = "http://www.openmicroscopy.org/Schemas/Additions/2011-09"


class ModuloType(Enum):
    """The dimension represented by this modulo."""

    ANGLE = "angle"
    PHASE = "phase"
    TILE = "tile"
    LIFETIME = "lifetime"
    LAMBDA = "lambda"
    OTHER = "other"


class Label(OMEType):
    value: int = Field(
        metadata={
            "required": True,
            "format": "base64",
        }
    )


class Modulo(OMEType):
    class Meta:
        namespace = MODULO_NS

    type: ModuloType = Field(
        metadata={
            "name": "Type",
            "type": "Attribute",
            "required": True,
        },
    )
    labels: List[Label] = Field(
        default_factory=list,
        metadata={
            "name": "Label",
            "type": "Element",
        },
    )
    type_description: Optional[str] = Field(
        default=None,
        metadata={
            "name": "TypeDescription",
            "type": "Attribute",
        },
    )
    unit: Optional[str] = Field(
        default=None,
        metadata={
            "name": "Unit",
            "type": "Attribute",
        },
    )
    start: Union[int, float, None] = Field(
        default=None,
        metadata={
            "name": "Start",
            "type": "Attribute",
        },
    )
    step: Union[int, float, None] = Field(
        default=None,
        metadata={
            "name": "Step",
            "type": "Attribute",
        },
    )
    end: Union[int, float, None] = Field(
        default=None,
        metadata={
            "name": "End",
            "type": "Attribute",
        },
    )

    @model_validator(mode="after")
    def _vroot(cls, v: "Modulo") -> "Modulo":
        if not v.labels and (v.start is None or v.end is None):
            raise ValueError("Must specify either labels or start/end")
        return v


class ModuloContainer(OMEType):
    class Meta:
        namespace = ADDITIONS_NS

    modulo_along_c: Optional[Modulo] = Field(
        default=None,
        metadata={
            "type": "Element",
            "name": "ModuloAlongC",
        },
    )
    modulo_along_z: Optional[Modulo] = Field(
        default=None,
        metadata={
            "type": "Element",
            "name": "ModuloAlongZ",
        },
    )
    modulo_along_t: Optional[Modulo] = Field(
        default=None,
        metadata={
            "type": "Element",
            "name": "ModuloAlongT",
        },
    )


class ModuloValue(XMLAnnotation.Value):
    class Meta:
        namespace = "http://www.openmicroscopy.org/Schemas/OME/2016-06"

    modulos: ModuloContainer = Field(
        default_factory=list,
        metadata={
            "name": "Modulo",
            "type": "Element",
        },
    )


class ModuloAnnotation(XMLAnnotation):
    class Meta:
        namespace = MODULO_NS

    value: ModuloValue = Field(
        default_factory=ModuloValue,
        metadata={
            "name": "Value",
            "type": "Element",
        },
    )
