import itertools
from collections.abc import Iterator
from typing import Any, List, TypeAlias, Union, get_args

from pydantic_compat import Field, root_validator

# for circular import reasons...
from ome_types._autogenerated.ome_2016_06.boolean_annotation import BooleanAnnotation
from ome_types._autogenerated.ome_2016_06.comment_annotation import CommentAnnotation
from ome_types._autogenerated.ome_2016_06.double_annotation import DoubleAnnotation
from ome_types._autogenerated.ome_2016_06.file_annotation import FileAnnotation
from ome_types._autogenerated.ome_2016_06.list_annotation import ListAnnotation
from ome_types._autogenerated.ome_2016_06.long_annotation import LongAnnotation
from ome_types._autogenerated.ome_2016_06.map_annotation import MapAnnotation
from ome_types._autogenerated.ome_2016_06.tag_annotation import TagAnnotation
from ome_types._autogenerated.ome_2016_06.term_annotation import TermAnnotation
from ome_types._autogenerated.ome_2016_06.timestamp_annotation import (
    TimestampAnnotation,
)
from ome_types._autogenerated.ome_2016_06.xml_annotation import XMLAnnotation
from ome_types._mixins._base_type import OMEType

AnnotationType: TypeAlias = Union[
    XMLAnnotation,
    FileAnnotation,
    ListAnnotation,
    LongAnnotation,
    DoubleAnnotation,
    CommentAnnotation,
    BooleanAnnotation,
    TimestampAnnotation,
    TagAnnotation,
    TermAnnotation,
    MapAnnotation,
]
AnnotationInstances = get_args(AnnotationType)


class StructuredAnnotations(OMEType):
    """Unordered collection of annotations attached to objects in the OME data model."""

    class Meta:
        namespace = "http://www.openmicroscopy.org/Schemas/OME/2016-06"

    xml_annotations: List[XMLAnnotation] = Field(
        default_factory=list,
        json_schema_extra={"metadata": {"name": "XMLAnnotation", "type": "Element"}},
    )
    file_annotations: List[FileAnnotation] = Field(
        default_factory=list,
        json_schema_extra={"metadata": {"name": "FileAnnotation", "type": "Element"}},
    )
    list_annotations: List[ListAnnotation] = Field(
        default_factory=list,
        json_schema_extra={"metadata": {"name": "ListAnnotation", "type": "Element"}},
    )
    long_annotations: List[LongAnnotation] = Field(
        default_factory=list,
        json_schema_extra={"metadata": {"name": "LongAnnotation", "type": "Element"}},
    )
    double_annotations: List[DoubleAnnotation] = Field(
        default_factory=list,
        json_schema_extra={"metadata": {"name": "DoubleAnnotation", "type": "Element"}},
    )
    comment_annotations: List[CommentAnnotation] = Field(
        default_factory=list,
        json_schema_extra={
            "metadata": {"name": "CommentAnnotation", "type": "Element"}
        },
    )
    boolean_annotations: List[BooleanAnnotation] = Field(
        default_factory=list,
        json_schema_extra={
            "metadata": {"name": "BooleanAnnotation", "type": "Element"}
        },
    )
    timestamp_annotations: List[TimestampAnnotation] = Field(
        default_factory=list,
        json_schema_extra={
            "metadata": {"name": "TimestampAnnotation", "type": "Element"}
        },
    )
    tag_annotations: List[TagAnnotation] = Field(
        default_factory=list,
        json_schema_extra={"metadata": {"name": "TagAnnotation", "type": "Element"}},
    )
    term_annotations: List[TermAnnotation] = Field(
        default_factory=list,
        json_schema_extra={"metadata": {"name": "TermAnnotation", "type": "Element"}},
    )
    map_annotations: List[MapAnnotation] = Field(
        default_factory=list,
        json_schema_extra={"metadata": {"name": "MapAnnotation", "type": "Element"}},
    )

    def __iter__(self) -> Iterator[AnnotationType]:  # type: ignore[override]
        return itertools.chain(
            self.xml_annotations,
            self.file_annotations,
            self.list_annotations,
            self.long_annotations,
            self.double_annotations,
            self.comment_annotations,
            self.boolean_annotations,
            self.timestamp_annotations,
            self.tag_annotations,
            self.term_annotations,
            self.map_annotations,
        )

    def __getitem__(self, i: int) -> AnnotationType:
        # return the ith item in the __iter__ sequence
        return next(itertools.islice(self, i, None))

    def __len__(self) -> int:
        return sum(1 for _ in self)

    def append(self, item: AnnotationType) -> None:
        getattr(self, self._field_name(item)).append(item)

    def remove(self, item: AnnotationType) -> None:
        getattr(self, self._field_name(item)).remove(item)

    def __eq__(self, _value: object) -> bool:
        if isinstance(_value, list):
            return list(self) == _value
        return super().__eq__(_value)

    @classmethod
    def _field_name(cls, item: AnnotationType) -> str:
        if not isinstance(item, AnnotationInstances):
            raise TypeError(  # pragma: no cover
                f"Expected an instance of {AnnotationInstances}, got {item!r}"
            )
        return item.__class__.__name__[:-10].lower() + "_annotations"

    @root_validator(pre=True)
    def _validate_root(cls, values: Any) -> dict:
        if isinstance(values, list):
            # convert list[AnnotationType] to dict with keys matching the
            # fields in StructuredAnnotations
            _values: dict = {}
            for item in values:
                _values.setdefault(cls._field_name(item), []).append(item)
            values = _values
        return values


StructuredAnnotationList = StructuredAnnotations
