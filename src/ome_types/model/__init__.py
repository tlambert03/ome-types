from typing import Any

from ._ome_2016_06 import (
    OME,
    ROI,
    AffineTransform,
    Annotation,
    AnnotationRef,
    Arc,
    BasicAnnotation,
    BinaryFile,
    BinData,
    BooleanAnnotation,
    Channel,
    ChannelRef,
    CommentAnnotation,
    Dataset,
    DatasetRef,
    Detector,
    DetectorSettings,
    Dichroic,
    DichroicRef,
    DoubleAnnotation,
    Ellipse,
    Experiment,
    Experimenter,
    ExperimenterGroup,
    ExperimenterGroupRef,
    ExperimenterRef,
    ExperimentRef,
    External,
    Filament,
    FileAnnotation,
    Filter,
    FilterRef,
    FilterSet,
    FilterSetRef,
    Folder,
    FolderRef,
    GenericExcitationSource,
    Image,
    ImageRef,
    ImagingEnvironment,
    Instrument,
    InstrumentRef,
    Label,
    Laser,
    Leader,
    LightEmittingDiode,
    LightPath,
    LightSource,
    LightSourceGroup,
    LightSourceSettings,
    Line,
    ListAnnotation,
    LongAnnotation,
    ManufacturerSpec,
    Map,
    MapAnnotation,
    Mask,
    MicrobeamManipulation,
    MicrobeamManipulationRef,
    Microscope,
    NumericAnnotation,
    Objective,
    ObjectiveSettings,
    Pixels,
    Plane,
    Plate,
    PlateAcquisition,
    Point,
    Polygon,
    Polyline,
    Project,
    ProjectRef,
    Pump,
    Reagent,
    ReagentRef,
    Rectangle,
    Reference,
    Rights,
    ROIRef,
    Screen,
    Settings,
    Shape,
    ShapeGroup,
    ShapeGroupType,
    StageLabel,
    StructuredAnnotations,
    TagAnnotation,
    TermAnnotation,
    TextAnnotation,
    TiffData,
    TimestampAnnotation,
    TransmittanceRange,
    TypeAnnotation,
    Well,
    WellSample,
    WellSampleRef,
    XMLAnnotation,
    simple_types,
)

__all__ = [
    "AffineTransform",
    "Annotation",
    "AnnotationRef",
    "Arc",
    "BasicAnnotation",
    "BinData",
    "BinaryFile",
    "BooleanAnnotation",
    "Channel",
    "ChannelRef",
    "CommentAnnotation",
    "Dataset",
    "DatasetRef",
    "Detector",
    "DetectorSettings",
    "Dichroic",
    "DichroicRef",
    "DoubleAnnotation",
    "Ellipse",
    "Experiment",
    "ExperimentRef",
    "Experimenter",
    "ExperimenterGroup",
    "ExperimenterGroupRef",
    "ExperimenterRef",
    "External",
    "Filament",
    "FileAnnotation",
    "Filter",
    "FilterRef",
    "FilterSet",
    "FilterSetRef",
    "Folder",
    "FolderRef",
    "GenericExcitationSource",
    "Image",
    "ImageRef",
    "ImagingEnvironment",
    "Instrument",
    "InstrumentRef",
    "Label",
    "Laser",
    "Leader",
    "LightEmittingDiode",
    "LightPath",
    "LightSource",
    "LightSourceGroup",
    "LightSourceSettings",
    "Line",
    "ListAnnotation",
    "LongAnnotation",
    "ManufacturerSpec",
    "Map",
    "MapAnnotation",
    "Mask",
    "MicrobeamManipulation",
    "MicrobeamManipulationRef",
    "Microscope",
    "NumericAnnotation",
    "OME",
    "Objective",
    "ObjectiveSettings",
    "Pixels",
    "Plane",
    "Plate",
    "PlateAcquisition",
    "Point",
    "Polygon",
    "Polyline",
    "Project",
    "ProjectRef",
    "Pump",
    "ROI",
    "ROIRef",
    "Reagent",
    "ReagentRef",
    "Rectangle",
    "Reference",
    "Rights",
    "Screen",
    "Settings",
    "Shape",
    "ShapeGroup",
    "ShapeGroupType",
    "StageLabel",
    "StructuredAnnotations",
    "TagAnnotation",
    "TermAnnotation",
    "TextAnnotation",
    "TiffData",
    "TimestampAnnotation",
    "TransmittanceRange",
    "TypeAnnotation",
    "Well",
    "WellSample",
    "WellSampleRef",
    "XMLAnnotation",
    "simple_types",
]


from . import _ome_2016_06


def __getattr__(name: str) -> Any:
    import warnings

    warnings.warn(
        f"Accessing {name!r} from {__name__!r} is deprecated. "
        f"Use '{__name__}._ome_2016_06.{name}' instead.",
        stacklevel=2,
    )
    return getattr(_ome_2016_06, name)
